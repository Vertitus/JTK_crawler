import json
import pandas as pd
import streamlit as st
from streamlit_autorefresh import st_autorefresh
import plotly.express as px
import os

st.set_page_config(page_title="JTK Crawler Dashboard", layout="wide")

# –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
st_autorefresh(interval=10 * 1000, key="data_refresh")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üìä JTK Crawler Dashboard")

metrics_file = "metrics.json"

if not os.path.exists(metrics_file):
    st.warning(f"–§–∞–π–ª –º–µ—Ç—Ä–∏–∫ '{metrics_file}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    st.stop()

try:
    with open(metrics_file, "r", encoding="utf-8") as f:
        raw_data = json.load(f)
except json.JSONDecodeError:
    st.error("–§–∞–π–ª –º–µ—Ç—Ä–∏–∫ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω.")
    st.stop()

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DataFrame
data = []
for url, info in raw_data.items():
    data.append({
        "URL": url,
        "Matches": ", ".join([f"{m['match']} ({m['type']})" for m in info["matches"]]),
        "Match Count": len(info["matches"]),
        "Timestamp": info.get("timestamp", None),
        "Depth": info.get("depth", None),
        "Status": info.get("status", None),
    })

df = pd.DataFrame(data)

if df.empty:
    st.info("–î–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ —Å–æ–±—Ä–∞–Ω—ã.")
    st.stop()

# –¢–∞–±–ª–∏—Ü–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
st.subheader("üìÑ –°–æ–≤–ø–∞–¥–µ–Ω–∏—è")
st.dataframe(df.sort_values("Match Count", ascending=False), use_container_width=True)

# –ì—Ä–∞—Ñ–∏–∫: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –≥–ª—É–±–∏–Ω–µ
if "Depth" in df and df["Depth"].notna().any():
    depth_chart = px.histogram(df, x="Depth", y="Match Count", nbins=20, title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –≥–ª—É–±–∏–Ω–µ")
    st.plotly_chart(depth_chart, use_container_width=True)

# –ì—Ä–∞—Ñ–∏–∫: —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω–∏—Ü
if "Status" in df and df["Status"].notna().any():
    status_chart = px.pie(df, names="Status", title="–°—Ç–∞—Ç—É—Å—ã —Å—Ç—Ä–∞–Ω–∏—Ü")
    st.plotly_chart(status_chart, use_container_width=True)

# –ò—Å—Ç–æ—Ä–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å timestamp)
if "Timestamp" in df and df["Timestamp"].notna().any():
    df["Timestamp"] = pd.to_datetime(df["Timestamp"], errors="coerce")
    timeline = df.dropna(subset=["Timestamp"])
    timeline = timeline.sort_values("Timestamp")

    if not timeline.empty:
        line_chart = px.line(
            timeline,
            x="Timestamp",
            y="Match Count",
            title="–ò—Å—Ç–æ—Ä–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏",
            markers=True
        )
        st.plotly_chart(line_chart, use_container_width=True)
